import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
)
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from city_group_ids import CITY_GROUP_IDS  # —Å–ª–æ–≤–∞—Ä—å {(country, city): chat_id}

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
WEBAPP_URL = os.getenv("WEBAPP_URL")

if not WEBAPP_URL:
    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üåç –ñ–∏–≤—É –≤‚Ä¶", web_app=WebAppInfo(url=WEBAPP_URL))]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥:",
        reply_markup=reply_markup
    )

# /getchatid
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        f"Chat ID: <code>{chat_id}</code>",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.web_app_data:
            return

        data = json.loads(update.message.web_app_data.data)
        logger.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ: {data}")

        action = data.get("action")
        country = data.get("country")
        city = data.get("city")
        category = data.get("category")
        contact = data.get("contact")
        text = data.get("text")

        key = (country, city)
        group_id = CITY_GROUP_IDS.get(key)

        if not group_id:
            await update.message.reply_text(
                "‚õî –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.\n"
                "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥ –ì–µ–ª—å–¥–µ—Ä–Ω (–ì–µ—Ä–º–∞–Ω–∏—è)."
            )
            return

        if action == "view":
            username = f"zhivuv_{city.lower()}"
            await update.message.reply_text(
                f"üìç –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"üë• –ì—Ä—É–ø–ø–∞ {city}", url=f"https://t.me/{username}")]
                ])
            )
            return

        if action == "add":
            if not all([category, contact, text]):
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                return

            post = (
                f"üìç <b>{city}, {country}</b>\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
            context.user_data["last_post"] = {
                "post": post,
                "chat_id": group_id
            }

            await context.bot.send_message(
                chat_id=group_id,
                text=post,
                parse_mode="HTML"
            )

            logger.info(f"[INFO] –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {group_id}")

            await update.message.reply_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—ë –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é."
            )

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebApp –¥–∞–Ω–Ω—ã—Ö", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = context.user_data.get("last_post")
        if not data:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Mini App.")
            return

        if not update.message.photo:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            return

        photo_id = update.message.photo[-1].file_id

        await context.bot.send_photo(
            chat_id=data["chat_id"],
            photo=photo_id,
            caption=data["post"],
            parse_mode="HTML"
        )

        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        context.user_data.pop("last_post", None)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

# –í—Ä–µ–º–µ–Ω–Ω—ã–π Echo chat_id
async def echo_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        chat_id = update.effective_chat.id
        await update.message.reply_text(
            f"Chat ID: <code>{chat_id}</code>",
            parse_mode="HTML"
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def setup_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getchatid", get_chat_id))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_chat_id))  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π
