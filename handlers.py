import os
import logging
import requests
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from telegram.error import TelegramError

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
SAVE_AD_WEBHOOK = os.getenv("SAVE_AD_WEBHOOK")

# üî¢ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
COUNTRY, CITY, CATEGORY, TEXT, CONTACT, GDPR = range(6)

# üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_OPTIONS = [
    "–†–µ–º–æ–Ω—Ç", "–ñ–∏–ª—å–µ", "–ü–µ—Ä–µ–≤–æ–∑–∫–∏", "–ü–æ–º–æ—â—å –ø–æ –¥–æ–º—É",
    "–ü—Ä–æ–¥–∞–º", "–ö—É–ø–ª—é", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–û–±—É—á–µ–Ω–∏–µ", "–£—Å–ª—É–≥–∏"
]

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("/add"), KeyboardButton("/cancel")],
            [KeyboardButton("/search"), KeyboardButton("/help")]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# ‚ùì –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ö—ç—à—Ç–µ–≥—É"
    )

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåç –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:")
    return COUNTRY

async def set_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    country = update.message.text.strip()
    if country.lower() == "—Ä–æ—Å—Å–∏—è":
        await update.message.reply_text("‚õî –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –†–æ—Å—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return ConversationHandler.END
    context.user_data["country"] = country
    await update.message.reply_text("üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text.strip()
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton(cat)] for cat in CATEGORY_OPTIONS],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    return CATEGORY

async def set_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text.strip()
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    return TEXT

async def set_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["text"] = update.message.text.strip()
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:")
    return CONTACT

async def set_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text.strip()
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?",
        reply_markup=keyboard
    )
    return GDPR

async def set_gdpr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    consent = update.message.text.lower().strip()
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...", reply_markup=ReplyKeyboardRemove())

    if "–¥–∞" not in consent:
        await update.message.reply_text("‚õî –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è.")
        return ConversationHandler.END

    # üì¶ –î–∞–Ω–Ω—ã–µ
    user_id = update.effective_user.id
    message_date = update.message.date.isoformat()

    country = context.user_data.get("country")
    city = context.user_data.get("city")
    category = context.user_data.get("category")
    text = context.user_data.get("text")
    contact = context.user_data.get("contact")

    hashtags = f"#{country.replace(' ', '')} #{city.replace(' ', '')} #{category.replace(' ', '')}"
    post = (
        f"<b>üìç {city}, {country}</b>\n"
        f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"<b>üë§ –ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}\n"
        f"<b>üìù –¢–µ–∫—Å—Ç:</b> {text}\n\n"
        f"{hashtags}"
    )

    try:
        sent = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=post,
            parse_mode="HTML"
        )
    except TelegramError:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    context.user_data["last_post"] = {
        "post": post,
        "chat_id": CHANNEL_ID
    }

    payload = {
        "user_id": user_id,
        "country": country,
        "city": city,
        "category": category,
        "contact": contact,
        "text": text,
        "gdpr": True,
        "channel": CHANNEL_ID,
        "timestamp": message_date,
        "message_id": sent.message_id
    }

    if SAVE_AD_WEBHOOK:
        try:
            response = requests.post(SAVE_AD_WEBHOOK, json=payload, timeout=5)
            response.raise_for_status()
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Webhook.")
        except requests.RequestException:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Webhook", exc_info=True)

    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\nüì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
    return ConversationHandler.END

# üì∏ –§–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data.get("last_post")
    if not data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (/add).")
        return

    photo_id = update.message.photo[-1].file_id
    await context.bot.send_photo(
        chat_id=data["chat_id"],
        photo=photo_id,
        caption=data["post"],
        parse_mode="HTML"
    )
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ.")
    context.user_data.pop("last_post", None)

# ‚ùå –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# üÜî Chat ID
async def echo_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à Chat ID: <code>{update.effective_chat.id}</code>",
        parse_mode="HTML"
    )

# üîå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def setup_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add)],
        states={
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_country)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_city)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_category)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_text)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_contact)],
            GDPR: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_gdpr)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_chat_id))
