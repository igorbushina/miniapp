import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
)
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from city_group_usernames import CITY_GROUP_USERNAMES
from city_group_ids import CITY_GROUP_IDS

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()
WEBAPP_URL = os.getenv("WEBAPP_URL")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # -1002538677330

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞
if not WEBAPP_URL:
    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not CHANNEL_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üåç –ñ–∏–≤—É –≤‚Ä¶", web_app=WebAppInfo(url=WEBAPP_URL))]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

# /getchatid
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"Chat ID: <code>{update.effective_chat.id}</code>", parse_mode="HTML"
    )

# WebApp –æ–±—Ä–∞–±–æ—Ç–∫–∞
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.web_app_data:
            return

        data = json.loads(update.message.web_app_data.data)
        logger.info(f"[DEBUG] WebApp data: {data}")

        action = data.get("action")
        country = data.get("country")
        city = data.get("city")
        category = data.get("category")
        contact = data.get("contact")
        text = data.get("text")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã (–∏—Å–∫–ª—é—á–∞–µ–º –†–æ—Å—Å–∏—é)
        if country == "–†–æ—Å—Å–∏—è":
            await update.message.reply_text("‚õî –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –†–æ—Å—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        if action == "view":
            username = CITY_GROUP_USERNAMES.get((country, city))
            if username:
                await update.message.reply_text(
                    f"üìç –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ Telegram-–≥—Ä—É–ø–ø—É {city}:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(f"üë• –ì—Ä—É–ø–ø–∞ {city}", url=f"https://t.me/{username}")]
                    ])
                )
            else:
                await update.message.reply_text("‚õî –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        if action == "add":
            if not all([category, contact, text]):
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                return

            hashtags = f"#{country.replace(' ', '')} #{city.replace(' ', '')} #{category.replace(' ', '')}"

            post = (
                f"<b>üìç {city}, {country}</b>\n"
                f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"<b>üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact}\n"
                f"<b>üìù –¢–µ–∫—Å—Ç:</b> {text}\n\n"
                f"{hashtags}"
            )

            context.user_data["last_post"] = {
                "post": post,
                "chat_id": CHANNEL_ID
            }

            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=post,
                parse_mode="HTML"
            )

            await update.message.reply_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é."
            )

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –§–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = context.user_data.get("last_post")
        if not data:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
            return

        if not update.message.photo:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ.")
            return

        photo_id = update.message.photo[-1].file_id

        await context.bot.send_photo(
            chat_id=data["chat_id"],
            photo=photo_id,
            caption=data["post"],
            parse_mode="HTML"
        )

        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        context.user_data.pop("last_post", None)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")

# Echo
async def echo_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"Chat ID: <code>{update.effective_chat.id}</code>", parse_mode="HTML"
    )

# –•–µ–Ω–¥–ª–µ—Ä—ã
def setup_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getchatid", get_chat_id))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_chat_id))
