import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder
from handlers import setup_handlers

# üîß –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-app.onrender.com
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PORT = int(os.getenv("PORT", 10000))

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not WEBHOOK_URL or not WEBHOOK_URL.startswith("http"):
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http –∏–ª–∏ https")

# üßæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

# ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å webhook_path
application = ApplicationBuilder().token(TOKEN).webhook_path(WEBHOOK_PATH).build()

# üîå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
setup_handlers(application)
logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

# üöÄ –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await application.initialize()
    await application.start()
    await application.bot.set_webhook(url=WEBHOOK_URL + WEBHOOK_PATH)
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL + WEBHOOK_PATH}")
    await application.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        allowed_updates=["message", "callback_query"]
    )
    await application.updater.wait()

if __name__ == "__main__":
    asyncio.run(main())
