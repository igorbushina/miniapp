import os
import logging
from telegram.ext import ApplicationBuilder
from handlers import setup_handlers
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://miniapp-xx0j.onrender.com/webhook
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_PATH = "/webhook"  # Render —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç endpoint

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env")

if not WEBHOOK_URL:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env")

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = ApplicationBuilder().token(TOKEN).build()

# ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
async def on_startup(app):
    setup_handlers(app)
    logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
    await app.bot.set_webhook(url=WEBHOOK_URL + WEBHOOK_PATH)
    logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL + WEBHOOK_PATH}")

# üü¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook –Ω–∞ {PORT} ‚Äî {WEBHOOK_PATH}")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_path=WEBHOOK_PATH,
        post_init=on_startup,
        allowed_updates=["message", "callback_query"]
    )
